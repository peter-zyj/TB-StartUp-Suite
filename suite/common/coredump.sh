#!/bin/bash

if [[ $@ == "" ]];then
    echo -n "EG: ./coredump.sh [-loop|-p|-r|-l|-t|-detail] 2012-05-12"
    echo
    exit
fi




cmd1="ls /home/isa/bss"
cmd2="ls /arroyo/db"

result1=`$cmd1 2>/dev/null`


result2=`$cmd2 2>/dev/null`

echo

if [[ $1 == "-detail" ]];then
    core=`ls /home/isa/bss/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the App level!"
    else
        echo -n "Bingo!!Pls check the coredump for the APP level"
        echo
        cd /home/isa/bss/
        mkdir zyj_old
        APP_old_tag=0
        for Coredump in $core
        do

gdb blabla $Coredump << EOF 1>zyj.log 2>zyjerr.log
quit
EOF
        
        
            app=`awk '/Core was generated by/,//' zyj.log | awk -F "Core was generated by.." '{print$2}'| awk '{print $1}'`
        
gdb $app $Coredump << EOF 1>zyj1.log 2>zyjerr1.log
quit
EOF
        
            status=`awk '/.*exec file is newer than core file.*/' zyjerr1.log`
            r=${status:-'NULL'}
            if [[ "$r" == 'NULL' ]];then
                echo -n "**$Coredump::NEW::$app**"
                echo
            else
                echo -n "**$Coredump::OLD::$app**"
                echo
                APP_old_tag=1
                mv $Coredump zyj_old/.
            fi

        done
        if [[ $APP_old_tag -eq 1 ]];then
            echo -n "Do you want to remove all the OLD/INVALID APP level Coredump File??  Yes|No??"
            read option
            if [[ $option =~ .*Y.* || $option =~ .*y.* ]];then
                rm -rf zyj*
            else
                mv zyj_old/* .
                rm -rf zyj*
            fi
        else
            rm -rf zyj*
        fi
        cd /root
        
    fi
    

    echo
    echo -n "########################################"
    echo
    core=`ls /arroyo/db/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the DB level!"
    else
        echo -n "Bingo!!Pls check the coredump for the DB level"
        echo
        cd /arroyo/db/
        mkdir zyj_old
        DB_old_tag=0
        for Coredump in $core
        do
    
gdb blabla $Coredump << EOF 1>zyj.log 2>zyjerr.log
quit
EOF
        
        
            app=`awk '/Core was generated by/,//' zyj.log | awk -F "Core was generated by.." '{print$2}'| awk '{print $1}'`
        
gdb $app $Coredump << EOF 1>zyj1.log 2>zyjerr1.log
quit
EOF
        
            status=`awk '/.*exec file is newer than core file.*/' zyjerr1.log`
            r=${status:-'NULL'}
            if [[ "$r" == 'NULL' ]];then
                echo -n "**$Coredump::NEW::$app**"
                echo
            else
                echo -n "**$Coredump::OLD::$app**"
                echo
                DB_old_tag=1
                mv $Coredump zyj_old/.
            fi
        done
        if [[ $DB_old_tag -eq 1 ]];then
            echo -n "Do you want to remove all the OLD/INVALID DB level Coredump File??  Yes|No??"
            read option
            if [[ $option =~ .*Y.* || $option =~ .*y.* ]];then
                rm -rf zyj*
            else
                mv zyj_old/* .
                rm -rf zyj*
            fi
        else
            rm -rf zyj*
        fi
        cd /root
    fi
    echo

fi


if [[ $1 == "-p" ]];then
    echo -n "checking coredump now......."
    echo
    core=`ls /home/isa/bss/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the App level!"
    else
        echo -n "Bingo!!Pls check the coredump for the APP level"
    fi
    
    echo
    
    core=`ls /arroyo/db/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the DB level!"
    else
        echo -n "Bingo!!Pls check the coredump for the DB level"
    fi
    echo
fi

if [[ $1 == "-l" ]];then
    core=`ls /home/isa/bss/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the App level!"
    else
        echo -n "Bingo!!Pls check the coredump for the APP level"
        echo
        ls -ltr /home/isa/bss/core.*
    fi
    
    echo
    echo -n "########################################"
    echo
    core=`ls /arroyo/db/core.* 2>/dev/null`
    r=${core:-'NULL'}
    if [[ "$r" == 'NULL' ]];then
        echo -n "Perfect!!No coredump exist for the DB level!"
    else
        echo -n "Bingo!!Pls check the coredump for the DB level"
        echo
        ls -ltr /arroyo/db/core.*
    fi
    echo
fi

if [[ $1 == "-r" ]];then
    echo -n "Are you Sure that all the coredump be cleared Yes|NO ?"
    read option
    if [[ $option =~ .*Y.* || $option =~ .*y.* ]];then
        coreDel=`rm -rf /home/isa/bss/core.*`

        echo
        
        coreDel=`rm -rf /arroyo/db/core.*`

    fi

fi


if [[ $1 == "-t" ]];then
    time=$2
    echo -n "Are you Sure that Remove coredumps before $s Yes|NO ?"
    read option
    if [[ $option =~ .*Y.* || $option =~ .*y.* ]];then
        core=`ls /home/isa/bss/core.* 2>/dev/null`
        r=${core:-'NULL'}
        if [[ "$r" == 'NULL' ]];then
            echo -n "No coredump exist for the App level!,Cancel the action!"
        else
            echo -n "APP level Clearing ....."
            for c in $core
            do
                date1=`stat $c | awk '/.*Modify.*/{print $2}'`
                date2=$time
                
                t1=`date -d "$date1" +%s`
                t2=`date -d "$date2" +%s`
                 
                if [ $t1 -gt $t2 ]; then
                    continue
                elif [ $t1 -eq $t2 ]; then
                    continue
                else
                    rm -rf $c
                fi
            done
        fi
        
        echo
        
        core=`ls /arroyo/db/core.* 2>/dev/null`
        r=${core:-'NULL'}
        if [[ "$r" == 'NULL' ]];then
            echo -n "Perfect!!No coredump exist for the DB level!"
        else
            echo -n "DB level Clearing ....."
            for c in $core
            do
                date1=`stat $c | awk '/.*Modify.*/{print $2}'`
                date2=$time
                
                t1=`date -d "$date1" +%s`
                t2=`date -d "$date2" +%s`
                 
                if [ $t1 -gt $t2 ]; then
                    continue
                elif [ $t1 -eq $t2 ]; then
                    continue
                else
                    rm -rf $c
                fi
            done
        fi
        echo

    fi

fi


if [[ $1 == "-loop" ]];then
    list1=(empty)
    list2=(empty)
    tag=0
    while true
    do
        Raw_core=`ls /home/isa/bss/core.* 2>/dev/null`
        r=${Raw_core:-'NULL'}
        if [[ "$r" != 'NULL' ]];then
            for t in $(ls /home/isa/bss/core.*)
            do
                core=`basename $t`
                ser=`echo ${list1[@]} | grep $core`
                if [ -z "$ser" ];then
                    list1=(${list1[@]} $core)
                    if [[ $tag -eq 1 ]];then
  
                        echo -n "***************!ATTENTION!*******************"
                        echo        
                        echo -e "Bingo!!New APP Core:\n$core \nTriggered!!!!"
                        echo -e "Warning Removed??  OK|NO"
                        
                        while true
                        do
                            read action
                            if [[ $action =~ OK || $action =~ ok ]];then
                                break
                            
                            else
                                echo -n "***************!ATTENTION!*******************"
                                echo        
                                echo -e "Bingo!!New APP Core:\n$core \nTriggered!!!!"
                                echo -e "Warning Removed??  OK|NO"
                            fi
                            sleep 1
                        done
                    fi
                fi
            done
            #for i in ${list1[@]}
            #do
            #    if [ $i != $core ];then
            #        list1=(${list1[@]} $core)
            #        echo -n "***************!ATTENTION!*******************"
            #        echo        
            #        echo -n "Bingo!!New APP Core:$core Triggered!!!!"
            #        echo
            #    fi
            #done


        fi       
        
        Raw_core=`ls /arroyo/db/core.* 2>/dev/null`
        r=${Raw_core:-'NULL'}
        if [[ "$r" != 'NULL' ]];then
            for t in $(ls /arroyo/db/core.*)
            do
                core=`basename $t`
                ser=`echo ${list2[@]} | grep $core`
                if [ -z "$ser" ];then
                    list2=(${list2[@]} $core)
                    if [[ $tag -eq 1 ]];then
                        echo -n "***************!ATTENTION!*******************"
                        echo        
                        echo -e "Bingo!!New DB Core:\n$core \nTriggered!!!!"
                    fi
                    
                fi        
            done
        
            #for i in ${list2[@]}
            #do
            #    if [ $i != $core ];then
            #        list2=(${list2[@]} $core)
            #        echo -n "***************!ATTENTION!*******************"
            #        echo        
            #        echo -n "Bingo!!New DB Core:$core Triggered!!!!"
            #        echo
            #    fi
            #done


        fi
        sleep 5
        tag=1
    done
    


fi
